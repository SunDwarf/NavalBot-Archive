"""
Generates the command data for the wiki.
"""
import asyncio
import time

import discord

from navalbot.api import botcls
from navalbot.api import commands

loop = asyncio.get_event_loop()

client = botcls.NavalClient()

# Load the plugins for the bot.
loop.run_until_complete(client.load_plugins())

time.sleep(0.05)

print("Generating wiki page for `{}` commands.".format(len(commands._func_cmd_mapping)))

fake_server = discord.Object(id=0)

# Declare the base stirng, for all the commands to add on to.
base = """# NavalBot Commands
**This file is automatically generated.**
<hr>
"""

cmd_template = " - `{cmd_names}`  \n\n" + "    Roles required: `{roles}`  \n" + "{help}\n"


def fix_up_help_text(text: str):
    """
    Fixes up help text to be consistent with markdown.
    """
    newtext_l = []
    split = text.split("\n")
    for line in split:
        if not line:
            newtext_l.append(line)
            continue
        # Add four spaces to the front and two to the end.
        newline = "    {}  ".format(line)
        newtext_l.append(newline)

    return "\n".join(newtext_l)


for f, cmd in commands._func_cmd_mapping.items():
    print("Generating data for command {f}...".format(f=f.__name__))
    assert isinstance(cmd, commands.Command)
    # Load the help text.
    c_help = fix_up_help_text(loop.run_until_complete(cmd.help(fake_server)))
    # Load the roles for the command.
    _roles = loop.run_until_complete(cmd._load_roles(fake_server))
    c_roles = ", ".join(_roles) if _roles else "N/A"
    if len(cmd.names) > 1:
        c_names = "(" + "|".join(cmd.names) + ")"
    else:
        c_names = cmd.names[0]
    # Format the template
    built = cmd_template.format(cmd_names=c_names, roles=c_roles, help=c_help)
    print("Built command data for command {f}.".format(f=f.__name__))
    base += built

time.sleep(0.05)

print(base)
